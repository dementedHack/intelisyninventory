<html lang="en"><head>

  <meta http-equiv="content-type" content="text/html; charset=UTF-8">
  <meta charset="utf-8">
  <title>Assets</title>

</head>
<body>

<!-- Special version of Bootstrap that is isolated to content wrapped in .bootstrap-iso -->
<link rel="stylesheet" href="https://formden.com/static/cdn/bootstrap-iso.css">

<!--Font Awesome (added because you use icons in your prepend/append)-->
<link rel="stylesheet" href="https://formden.com/static/cdn/font-awesome/4.4.0/css/font-awesome.min.css">

  <script
  src="https://code.jquery.com/jquery-2.2.4.min.js" integrity="sha256-BbhdlvQf/xTY9gja0Dq3HiwQF8LaCRTXxZKRutelT44="
  crossorigin="anonymous"></script>

  <link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css" rel="stylesheet">
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js"></script>

<!-- Inline CSS based on choices in "Settings" tab -->
<style>.bootstrap-iso .formden_header h2, .bootstrap-iso .formden_header p, .bootstrap-iso form{font-family: Arial, Helvetica, sans-serif; color: black}.bootstrap-iso form button, .bootstrap-iso form button:hover{color: white !important;} .asteriskField{color: red;}</style>

<!-- HTML Form (wrapped in a .bootstrap-iso div) -->
<nav class="navbar navbar-default">
  <div class="container-fluid">
    <div class="navbar-header">
      <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#myNavbar">
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>                        
      </button>
      <a class="navbar-brand" href="#">Intelisyn Asset Management</a>
    </div>
    <div class="collapse navbar-collapse" id="myNavbar">
      <ul class="nav navbar-nav">
        <li class="active"><a href="#">Home</a></li>
        <li><a href="#">About</a></li>
      </ul>
    </div>
  </div>
</nav>
<div class="bootstrap-iso">
 <div class="container-fluid">
  <!-- /.nav-collapse -->
  <div class="row row-offcanvas row-offcanvas-left">
        <div id="sidebarMenu">
            <div class="col-xs-6 col-sm-2 sidebar-offcanvas" id="sidebar" role="navigation" >
          <div class="sidebar-nav">
              <ul class="nav" style="margin-top: 10px;">
                  <li class="active"><a href="Assets">View Assets</a></li>
                  <li><a href="/views/add_item.html">Create Asset</a></li>
                  <li class="nav-divider"></li>
                  <li><a href="/views/employees.html">Employees</a></li>
              </ul>
          </div>
          <!--/.well -->
      </div>
  <div class="row">
   <div class="col-md-6 col-sm-6 col-sm-10">
    <div class="jumbotron">
      <a href="#" class="visible-xs" data-toggle="offcanvas"><i class="fa fa-lg fa-reorder"></i></a>
      <h1>Add Item</span></h1>
    </div>
    <form action="javascript:void(0);" class="form-horizontal" method="GET">
      <div class="form-group ">
      <label class="control-label col-sm-2 requiredField" for="date">
       Assigned To
       <span class="asteriskField">
        *
       </span>
      </label>
      <div class="col-sm-10">
       <div class="input-group">
        <div class="input-group-addon">
         <i class="fa fa-user">
         </i>
        </div>
        <select name="assignedTo" class="form-control" id="assignedTo">
        </select>
       </div>
      </div>
     </div>
     <div class="form-group">
      <label class="control-label col-sm-2 requiredField">
       Vendor
       <span class="asteriskField">
        *
       </span>
      </label>
      <div class="col-sm-10">
       <div class="input-group">
        <div class="input-group-addon">
         <i class="fa fa-calendar">
         </i>
        </div>
        <input class="form-control" id="vendor" name="vendor" placeholder="HP, Microsoft, etc." type="text">
       </div>
      </div>
     </div>
     <div class="form-group ">
      <label class="control-label col-sm-2 requiredField">
       Model
       <span class="asteriskField">
        *
       </span>
      </label>
      <div class="col-sm-10">
       <div class="input-group">
        <div class="input-group-addon">
         <i class="fa fa-calendar">
         </i>
        </div>
        <input class="form-control" id="model" name="model" type="text" placeholder="Spectre, Envy, etc.">
       </div>
      </div>
     </div>
     <div class="form-group ">
      <label class="control-label col-sm-2 requiredField">
       Quantity
       <span class="asteriskField">
        *
       </span>
      </label>
      <div class="col-sm-10">
       <div class="input-group">
        <div class="input-group-addon">
         <i class="fa fa-calendar">
         </i>
        </div>
         <input class="form-control" type="number" value="1" id="quantity" name="quantity" min="0">
       </div>
      </div>
     </div>
     <div class="form-group ">
      <label class="control-label col-sm-2 requiredField">
       Description
       <span class="asteriskField">
        *
       </span>
      </label>
      <div class="col-sm-10">
       <div class="input-group">
        <div class="input-group-addon">
         <i class="fa fa-comment">
         </i>
        </div>
        <textarea class="form-control" col="32" rows ="4" name="description" id="description" style="resize: none"></textarea>
       </div>
      </div>
     </div>
     <div class="form-group ">
      <label class="control-label col-sm-2 requiredField">
       Serial Number
      </label>
      <div class="col-sm-10">
       <div class="input-group">
        <div class="input-group-addon">
         <i class="fa fa-tags" aria-hidden="true"></i>
        </div>
        <input class="form-control" id="serialNumber" type="text" name="serialNumber" placeholder="Spectre, Envy, etc.">
       </div>
      </div>
     </div>
     <div class="form-group ">
      <label class="control-label col-sm-2 requiredField" for="date">
       Category
       <span class="asteriskField">
        *
       </span>
      </label>
      <div class="col-sm-10">
       <div class="input-group">
        <div class="input-group-addon">
         <i class="fa fa-flag">
         </i>
        </div>
        <select name="category" id="category" name="category" class="form-control">
          <option value=""></option>
          <option value="Hardware">Hardware</option>
          <option value="Software">Software</option>
          <option value="ComputerSystem">Computer System</option>
        </select>
       </div>
      </div>
     </div>
     <div class="form-group ">
      <label class="control-label col-sm-2 requiredField" for="date">
       Sub-category
       <span class="asteriskField">
        *
       </span>
      </label>
      <div class="col-sm-10">
       <div class="input-group">
        <div class="input-group-addon">
         <i class="fa fa-flag">
         </i>
        </div>
        <select name="subCategory" id="subCategory" class="form-control" disabled>
          <option value=""></option>
          <option value="HDD/SSD">HDD/SSD</option>
          <option value="Monitor">Monitor</option>
        </select>
       </div>
      </div>
     </div>
     <div class="form-group ">
      <label class="control-label col-sm-2 requiredField" for="date">
       Purchase Date
       <span class="asteriskField">
        *
       </span>
      </label>
      <div class="col-sm-10">
       <div class="input-group">
        <div class="input-group-addon">
         <i class="fa fa-calendar">
         </i>
        </div>
        <input class="form-control datePicker" id="purchaseDate" name="purchaseDate" placeholder="MM/DD/YYYY" type="text">
       </div>
      </div>
     </div>
     <div class="form-group ">
      <label class="control-label col-sm-2 requiredField" for="date">
       Assignment Date
       <span class="asteriskField">
        *
       </span>
      </label>
      <div class="col-sm-10">
       <div class="input-group">
        <div class="input-group-addon">
         <i class="fa fa-calendar">
         </i>
        </div>
        <input class="form-control datePicker" id="assignmentDate" name="assignmentDate" placeholder="MM/DD/YYYY" type="text">
       </div>
      </div>
     </div>
     <div class="form-group ">
      <label class="control-label col-sm-2 requiredField" for="date">
       End of Life Date
      </label>
      <div class="col-sm-10">
       <div class="input-group">
        <div class="input-group-addon">
         <i class="fa fa-calendar">
         </i>
        </div>
        <input class="form-control datePicker" id="EOLDate" name="EOLDate" placeholder="MM/DD/YYYY" type="text">
       </div>
      </div>
     </div>
     <div class="form-group">
      <div class="col-sm-10 col-sm-offset-2">
       <input name="_honey" style="display:none" type="text">
       <button class="btn btn-primary" id="submitButton">
        Submit
       </button>
      </div>
     </div>
    </form>
   </div>
  </div>
 </div>
</div>
</body>
<script src="https://www.gstatic.com/firebasejs/4.6.0/firebase.js"></script>
<script>
  // Initialize Firebase
  var config = {
    apiKey: "AIzaSyAqVtjnVwoi5HhyWnsW7qLNSwPGYaZ-2TA",
    authDomain: "intelisynassetmanagement.firebaseapp.com",
    databaseURL: "https://intelisynassetmanagement.firebaseio.com",
    projectId: "intelisynassetmanagement",
    storageBucket: "intelisynassetmanagement.appspot.com",
    messagingSenderId: "241325053027"
  };
  firebase.initializeApp(config);
</script>

<!-- Extra JavaScript/CSS added manually in "Settings" tab -->
<!-- Include jQuery -->
<script type="text/javascript" src="https://code.jquery.com/jquery-1.11.3.min.js"></script>

<!-- Include Date Range Picker -->
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.4.1/js/bootstrap-datepicker.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.4.1/css/bootstrap-datepicker3.css">

<script>

  var employeesList = [];

    var categories = ["", "Hardware", "Software", "ComputerSystem"]

    var subCategory = [["Peripheral", "Audio", "Telephony", "Networking", "Storage", "CPU", "Memory", "Printer","Toner"], ["Project Management", "O.S.", "Application Management"], ["Laptop", "Desktop"]] 

    var ref;
    var parentId;
    var parentName;
    // Get current logged in user info
    firebase.auth().onAuthStateChanged(function(UserInfo) {
      grabEmployeesListFromDB();
    if (UserInfo) {
        // User is signed in.
      self.currentUserUID = UserInfo.uid;
      console.log(self.currentUserUID)
    } else {
        // No user is signed in. Redirect to login page
        console.log("No one is logged in")
    }

    parentItemId = getUrlParameter('parentId');
    parentName = getUrlParameter('parentName');
  });

  var newItemPropertiesArray = [];
  
  $(document).ready(function(){

    var date_input=$(".datePicker"); //our date input has the name "date"

    console.log(date_input.val())
    var container=$('.bootstrap-iso form').length>0 ? $('.bootstrap-iso form').parent() : "body";
    date_input.datepicker({
      format: 'mm/dd/yyyy',
      container: container,
      todayHighlight: true,
      autoclose: true,
    });
    
  })

  $('#submitButton').click(function(){
      grabDataFromInputFieldsParseAndThenSendToDB();
    })

  function grabDataFromInputFieldsParseAndThenSendToDB(){
    grabDataFromInputFields(pushNewKeyIntoDatabaseAndAssignToVariable);
  }

  function grabDataFromInputFields (callback){
    newItemPropertiesArray = [$("#assignedTo").val(), $("#vendor").val(),$("#model").val(), $("#quantity").val(), $("#description").val(), $("#serialNumber").val(), $("#category").val(), $("#subCategory").val(), $("#purchaseDate").val(), $("#assignmentDate").val(), $("#EOLDate").val()];
    callback();
  }

  function pushNewKeyIntoDatabaseAndAssignToVariable(callback, tableReference) {
    if (self.parentItemId){
      console.log("Parent ID exists")
      ref = firebase.database().ref("ComputerSystem").child(parentItemId).child("components");
      newPostKey = ref.push().key;
      console.log(parentItemId)
      saveNewItemToCorrespondingDatabase(newPostKey, 'ComputerSystem', parentItemId);
    } else { 
      ref = firebase.database().ref("Asset");
      newPostKey = ref.push().key;
      saveNewItemToCorrespondingDatabase(newPostKey, newItemPropertiesArray[6], null);
    }

    // Iterate through the employees list to determine where to save item to
    for (var i =0; i < employeesList.length; i++) {
      if (employeesList[i].name === ($('#assignedTo').val())) {
          saveNewItemToEmployeeDatabase(newPostKey, employeesList[i].key)
      }
    }
  }

  async function saveNewItemToCorrespondingDatabase(postKey, tableReference, parentItemId) {
    console.log(parentItemId)

    if (parentItemId){
      ref  = firebase.database().ref(tableReference).child(parentItemId).child('components');
      console.log('Im running');
      ref.update({
        [postKey] : true
      });
      ref  = firebase.database().ref(tableReference).child(parentItemId).child('components');
      console.log('Im running');
      ref.update({
        [postKey] : true
      });

        ref = firebase.database().ref(newItemPropertiesArray[6]).child(postKey);

        ref.set({
        "assignedTo" : newItemPropertiesArray[0],
        "vendor" : newItemPropertiesArray[1],
        "model" : newItemPropertiesArray[2],
        "quantity" : newItemPropertiesArray[3],
        "description" : newItemPropertiesArray[4],
        "serialNumber" : newItemPropertiesArray[5],
        "category" : newItemPropertiesArray[6],
        "subCategory" : newItemPropertiesArray[7],
        "purchaseDate" : newItemPropertiesArray[8],
        "assignmentDate" : newItemPropertiesArray[9],
        "EOLDate" : newItemPropertiesArray[10],
        "isComponent" : true,
        "assignedToID" : parentItemId
      });
        ref = firebase.database().ref("Employee").child(postKey);
    } else {

      for (var i = 0; i < employeesList.length; i++){
        if (employeesList[i].name === newItemPropertiesArray[0]){
          parentItemId = employeesList[i].key;
        }
      }

       ref = firebase.database().ref(tableReference).child(postKey);
        ref.set({
        "assignedTo" : newItemPropertiesArray[0],
        "vendor" : newItemPropertiesArray[1],
        "model" : newItemPropertiesArray[2],
        "quantity" : newItemPropertiesArray[3],
        "description" : newItemPropertiesArray[4],
        "serialNumber" : newItemPropertiesArray[5],
        "category" : newItemPropertiesArray[6],
        "subCategory" : newItemPropertiesArray[7],
        "purchaseDate" : newItemPropertiesArray[8],
        "assignmentDate" : newItemPropertiesArray[9],
        "EOLDate" : newItemPropertiesArray[10],
        "isComponent" : false,
        "assignedToID" : parentItemId
      });
    }
    
    await wait(200);
    window.location.href = "/assets";
    //Creates a new UID in the database and assigns to a variable so we can save to it
  }

  function saveNewItemToEmployeeDatabase(postKey, employeeId) {
   ref = firebase.database().ref("Employee").child(employeeId).child("items").child(postKey);
    ref.set(true);
  }
    
 var newAssignedToValue;

  async function grabEmployeesListFromDB(){
    var newArray;
     ref = firebase.database().ref("Employee").once("value", function(snapshot){
        self.employeesList = snapshotToArray(snapshot)
     }).then(function(){
      
      if (parentName){
        
        self.categories.splice(-1,1);
        //assigns the current parentID to the assignedTo field
        for (var i = 0; i < employeesList.length; i++){
          if (parentName === employeesList[i].name){
            console.log(employeesList[i].name)
            newAssignedToValue = employeesList[i].name;
            
            //$("#assignedTo").prop('disabled', true);
          }
        }
        
      }


      console.log(categories.length)
      var newHTMLForCategoriesDiv = '<select name="category" id="category" name="category" class="form-control">'
      var newHTMLForAssignedToDiv = '<select name="assignedTo" class="form-control" id="assignedTo">';

      for(var i = 0; i < categories.length; i++){
        newHTMLForCategoriesDiv += '<option value="' + categories[i] + '">' + categories[i] + '</option>'
      }

      for(var i =0; i < employeesList.length; i++){
        console.log(employeesList.length)
        newHTMLForAssignedToDiv += '<option value=\"' + employeesList[i].name + '\">' + employeesList[i].name + '</option>'
          
      }
      newHTMLForAssignedToDiv += '</select></div>';
      newHTMLForCategoriesDiv += '</select>'
      console.log(newHTMLForAssignedToDiv)
      replaceHTMLinDiv("#", "assignedTo", newHTMLForAssignedToDiv);
      replaceHTMLinDiv("#", "category", newHTMLForCategoriesDiv);


      if(parentName){
        changeAssignedToValue();
      }

     })


  }

  function changeAssignedToValue(){
    $('#assignedTo option:contains("' + newAssignedToValue + '")').prop('selected','selected');
    $("#assignedTo").prop('disabled', true);
  }

  function snapshotToArray(snapshot){
    var returnArr = [];
    var newArray = {};

    snapshot.forEach(function(childSnapshot) {
        var item = childSnapshot.val();
        item.key = childSnapshot.key;
        console.log(item)
        returnArr.push(item);
    });
    console.log(returnArr)
    return returnArr;
  }

  function replaceHTMLinDiv(selector, divToReplace, newHTMLToAppendToDiv) {
    //console.log(selector + divToReplace)
    $(selector + divToReplace).html(newHTMLToAppendToDiv);
  }


  function getUrlParameter(sParam) {
    var sPageURL = decodeURIComponent(window.location.search.substring(1)),
        sURLVariables = sPageURL.split('&'),
        sParameterName,
        i;

      for (i = 0; i < sURLVariables.length; i++) {
          sParameterName = sURLVariables[i].split('=');

          if (sParameterName[0] === sParam) {
              return sParameterName[1] === undefined ? true : sParameterName[1];
          }
      }
  }

   function wait(ms) {
      return new Promise(r => setTimeout(r, ms));
    }


</script>
</html>