<html lang="en"><head>

  <meta http-equiv="content-type" content="text/html; charset=UTF-8">
  <meta charset="utf-8">
  <title>Assets</title>

</head>
<body>

<!-- Special version of Bootstrap that is isolated to content wrapped in .bootstrap-iso -->
<link rel="stylesheet" href="https://formden.com/static/cdn/bootstrap-iso.css">

<!--Font Awesome (added because you use icons in your prepend/append)-->
<link rel="stylesheet" href="https://formden.com/static/cdn/font-awesome/4.4.0/css/font-awesome.min.css">

  <script
  src="https://code.jquery.com/jquery-2.2.4.min.js" integrity="sha256-BbhdlvQf/xTY9gja0Dq3HiwQF8LaCRTXxZKRutelT44="
  crossorigin="anonymous"></script>

  <link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css" rel="stylesheet">
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js"></script>

<!-- Inline CSS based on choices in "Settings" tab -->
<style>.bootstrap-iso .formden_header h2, .bootstrap-iso .formden_header p, .bootstrap-iso form{font-family: Arial, Helvetica, sans-serif; color: black}.bootstrap-iso form button, .bootstrap-iso form button:hover{color: white !important;} .asteriskField{color: red;}</style>

<!-- HTML Form (wrapped in a .bootstrap-iso div) -->
<nav class="navbar navbar-default">
  <div class="container-fluid">
    <div class="navbar-header">
      <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#myNavbar">
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>                        
      </button>
      <a class="navbar-brand" href="#">Intelisyn Asset Management</a>
    </div>
    <div class="collapse navbar-collapse" id="myNavbar">
      <ul class="nav navbar-nav">
        <li class="active"><a href="#">Home</a></li>
        <li><a href="#">About</a></li>
      </ul>
    </div>
  </div>
</nav>
<div class="bootstrap-iso">
 <div class="container-fluid">
  <!-- /.nav-collapse -->
  <div class="row row-offcanvas row-offcanvas-left">
        <div id="sidebarMenu">
            <div class="col-xs-6 col-sm-2 sidebar-offcanvas" id="sidebar" role="navigation" >
          <div class="sidebar-nav">
              <ul class="nav" style="margin-top: 10px;">
                  <li class="active"><a href="Assets">View Assets</a></li>
                  <li><a href="add_item">Create Asset</a></li>
                  <li class="nav-divider"></li>
                  <li><a href="employees">Employees</a></li>
              </ul>
          </div>
          <!--/.well -->
      </div>
  <div class="row">
   <div class="col-md-6 col-sm-6 col-sm-10">
    <div class="jumbotron">
      <a href="#" class="visible-xs" data-toggle="offcanvas"><i class="fa fa-lg fa-reorder"></i></a>
      <h1>Assets</span></h1>
    </div>
    <div id = "">
      <ul class="nav navbar-nav">
        <li>Show Components?<input type="checkbox" id="filterCheckbox"></li>
      </ul>  
    </div>
    <button class="btn btn-primary" id="filterButton">Filter</button>
    <div class="col-md-12" id="Hardware">
    </div>
    <div class="col-md-12" id="Software">
    </div>
    <div class="col-md-12" id="ComputerSystem">
    </div>
   </div>
  </div>
 </div>
</div>
</body>
<script src="https://www.gstatic.com/firebasejs/4.6.0/firebase.js"></script>
<script>
  // Initialize Firebase
  var config = {
    apiKey: "AIzaSyAqVtjnVwoi5HhyWnsW7qLNSwPGYaZ-2TA",
    authDomain: "intelisynassetmanagement.firebaseapp.com",
    databaseURL: "https://intelisynassetmanagement.firebaseio.com",
    projectId: "intelisynassetmanagement",
    storageBucket: "intelisynassetmanagement.appspot.com",
    messagingSenderId: "241325053027"
  };
  firebase.initializeApp(config);
</script>

<!-- Extra JavaScript/CSS added manually in "Settings" tab -->
<!-- Include jQuery -->
<script type="text/javascript" src="https://code.jquery.com/jquery-1.11.3.min.js"></script>

<!-- Include Date Range Picker -->
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.4.1/js/bootstrap-datepicker.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.4.1/css/bootstrap-datepicker3.css">

<script>

  var ref;

  // These are the arrays we insert data from the DB into. They will contain snapshot objects
  var retrievedComputerSystemArray = [];
  var retrievedSoftwareArray = [];
  var retrievedHardwareArray = [];

  // These are the arrays we insert data from the DB into. They will contain snapshot objects
  var retrievedComputerSystemKeyArray = [];
  var retrievedSoftwareKeyArray = [];
  var retrievedHardwareKeyArray = [];

  // These are the arrays we place the cell html code into. Each item will be a string of html.
  var computerSystemHTMLArray = [];
  var softwareHTMLArray = [];
  var hardwareHTMLArray = [];

    // Get current logged in user info
  firebase.auth().onAuthStateChanged(function(UserInfo) {
    // Will initially call with the filter added
      grabAssetData(true);
    if (UserInfo) {
        // User is signed in.
      self.currentUserUID = UserInfo.uid;
      console.log(self.currentUserUID)
    } else {
        // No user is signed in. Redirect to login page
        console.log("No one is logged in")
    }
  });
  
  function grabAssetData(filter){
    grabAllDataOnceFromDatabase("ComputerSystem", retrievedComputerSystemArray, createCellFromArrayInfo, filter);
    grabAllDataOnceFromDatabase("Hardware", retrievedHardwareArray, createCellFromArrayInfo, filter);
    grabAllDataOnceFromDatabase("Software", retrievedSoftwareArray, createCellFromArrayInfo, filter);
  };


// THis switch statement is messed up. Want each of the arrays to have the corresponding UIDs in them
  function grabAllDataOnceFromDatabase(tableToQuery, array, callback, filter){
    //console.log(tableToQuery)
    var keysArr;

    ref = firebase.database().ref(tableToQuery).once("value", function(snapshot){
      switch(tableToQuery) {
          case "ComputerSystem":
              array = snapshotToArray(snapshot, retrievedComputerSystemKeyArray);
              keysArr = self.retrievedComputerSystemKeyArray
              break;
          case "Hardware":
              array = snapshotToArray(snapshot, retrievedHardwareArray);
              keysArr = self.retrievedHardwareKeyArray;
              break;
          case "Software":
              array = snapshotToArray(snapshot, retrievedSoftwareArray);
              keysArr = self.retrievedSoftwareKeyArray;
              break;    
          default:
              console.log("default case")
      }

    }).then(function(){
      callback(array, tableToQuery, replaceHTMLinDiv, keysArr, filter);
    });
  }
    


  var newArray2 = [];


    var counter = 0;


  // Convert the snapshot we receive from the DB into an array by pushing each snapshot child into the global array.
  function snapshotToArray(snapshot, keysArray){

    counter += 1;
    var returnArr = [];
    var newArray = {};

    snapshot.forEach(function(childSnapshot) {



        var item = childSnapshot.val();
        item.key = childSnapshot.key;

        returnArr.push(item);

        newArray[keysArray] = item.key;
        newItem = (newArray[keysArray])


        keysArray.push(item.key)

    });



    //console.log(keysArray);
    keysArray = keysArray;
    //console.log(counter)
    switch(counter) {
    	// The first case handles the computer system array
      case 1:
          self.retrievedComputerSystemKeyArray = keysArray;
          break;
      case 2:
      	  
          self.retrievedHardwareKeyArray = keysArray;
           //console.log(retrievedSoftwareKeyArray)
          break;
      case 3:
          self.retrievedSoftwareKeyArray = keysArray;
          break;    
      default:
          console.log("default case")
 	}
    return returnArr;
  }



  function createCellFromArrayInfo(originalArray, category, callback, keysArr, filter){
    var tempArray = [];

    var htmlToAppendToArray = '<h2>' + category + '</h2><hr><table class="table table-striped table-hover"><thead><tr><th>Assigned To</th><th>Vendor</th><th>Model</th><th>Description</th><th>Qty.</th><th>Serial Number</th><th>SubCategory</th><th>Assignment Date</th><th>Purchase Date</th><th>E.O.L. Date</th></tr></thead><tbody>';

    var newDivHTMLWithAllElements = '<h2>' + category + '</h2><hr><table class="table table-striped table-hover"><thead><tr><th>Assigned To</th><th>Vendor</th><th>Model</th><th>Description</th><th>Qty.</th><th>Serial Number</th><th>SubCategory</th><th>Assignment Date</th><th>Purchase Date</th><th>E.O.L. Date</th></tr></thead><tbody>';

    for(var i =0; i < originalArray.length; i++){
      
        var convertedPurchaseDateAsInt = convertDateToJavaScriptDateFormat(originalArray[i].purchaseDate);
        var convertedEOLDateAsInt = convertDateToJavaScriptDateFormat(originalArray[i].EOLDate);
        console.log(convertedPurchaseDateAsInt);
        console.log(convertedEOLDateAsInt);
      if (originalArray[i].isComponent === true) {
        // if it is a component we are not currently doing anything
        console.log(originalArray[i]);
         // This logic determines whether an item has expired 
        if (convertedEOLDateAsInt < convertedPurchaseDateAsInt) {
          newDivHTMLWithAllElements += '<tr id=' + keysArr[i] + ' class="' + category + ' expiredCell"><td>' + originalArray[i].assignedTo + '</td>';
        } else if ((convertedEOLDateAsInt.getMonth() - convertedPurchaseDateAsInt.getMonth()) <= 2 ) {
          console.log("item is expiring soon");
          newDivHTMLWithAllElements += '<tr id=' + keysArr[i] + ' class="' + category + ' expiringCell"><td>' + originalArray[i].assignedTo + '</td>';
        } else {
           newDivHTMLWithAllElements += '<tr id=' + keysArr[i] + ' class="' + category + '"><td>' + originalArray[i].assignedTo + '</td>';
        }




        newDivHTMLWithAllElements += '<td>' + originalArray[i].vendor + '</td>';
        newDivHTMLWithAllElements += '<td>' + originalArray[i].model + '</td>';
        newDivHTMLWithAllElements += '<td>' + originalArray[i].description + '</td>';
        newDivHTMLWithAllElements += '<td>' + originalArray[i].quantity + '</td>';
        newDivHTMLWithAllElements += '<td>' + originalArray[i].serialNumber + '</td>';
        newDivHTMLWithAllElements += '<td>' + originalArray[i].subCategory + '</td>';
        newDivHTMLWithAllElements += '<td>' + originalArray[i].purchaseDate + '</td>';
        newDivHTMLWithAllElements += '<td>' + originalArray[i].assignmentDate + '</td>';
        newDivHTMLWithAllElements += '<td>' + originalArray[i].EOLDate + '</td><td><i class="fa fa-trash" aria-hidden="true" style="float: right;" data-id="' + keysArr[i] + '""></i></td>';
        newDivHTMLWithAllElements += '</tr>';

      } else {
        //convertDateToInt(originalArray[i].EOLDate);
        var convertedPurchaseDateAsInt = convertDateToJavaScriptDateFormat(originalArray[i].purchaseDate);
        var convertedEOLDateAsInt = convertDateToJavaScriptDateFormat(originalArray[i].EOLDate);
        console.log(convertedPurchaseDateAsInt);
        console.log(convertedEOLDateAsInt);

        if (convertedEOLDateAsInt < convertedPurchaseDateAsInt) {
          newDivHTMLWithAllElements += '<tr id=' + keysArr[i] + ' class="' + category + ' expiredCell"><td>' + originalArray[i].assignedTo + '</td>';
        } else if ((convertedEOLDateAsInt.getMonth() - convertedPurchaseDateAsInt.getMonth()) <= 2 ) {
          console.log("item is expiring soon");
          newDivHTMLWithAllElements += '<tr id=' + keysArr[i] + ' class="' + category + ' expiringCell"><td>' + originalArray[i].assignedTo + '</td>';
        } else {
           newDivHTMLWithAllElements += '<tr id=' + keysArr[i] + ' class="' + category + '"><td>' + originalArray[i].assignedTo + '</td>';
        }

        // This logic determines whether an item has expired 
        if (convertedEOLDateAsInt < convertedPurchaseDateAsInt) {
          console.log("This item is expired")
          htmlToAppendToArray += '<tr id=' + keysArr[i] + ' class="' + category + ' expiredCell"><td>' + originalArray[i].assignedTo + '</td>';
        } else if ((convertedEOLDateAsInt.getMonth() - convertedPurchaseDateAsInt.getMonth()) <= 2 ) {
          console.log("item is expiring soon");
          htmlToAppendToArray += '<tr id=' + keysArr[i] + ' class="' + category + ' expiringCell"><td>' + originalArray[i].assignedTo + '</td>';
        } else {
           htmlToAppendToArray += '<tr id=' + keysArr[i] + ' class="' + category + '"><td>' + originalArray[i].assignedTo + '</td>';
        }


        htmlToAppendToArray += '<td>' + originalArray[i].vendor + '</td>';
        htmlToAppendToArray += '<td>' + originalArray[i].model + '</td>';
        htmlToAppendToArray += '<td>' + originalArray[i].description + '</td>';
        htmlToAppendToArray += '<td>' + originalArray[i].quantity + '</td>';
        htmlToAppendToArray += '<td>' + originalArray[i].serialNumber + '</td>';
        htmlToAppendToArray += '<td>' + originalArray[i].subCategory + '</td>';
        htmlToAppendToArray += '<td>' + originalArray[i].purchaseDate + '</td>';
        htmlToAppendToArray += '<td>' + originalArray[i].assignmentDate + '</td>';
        htmlToAppendToArray += '<td>' + originalArray[i].EOLDate + '</td><td><i class="fa fa-trash" aria-hidden="true" style="float: right;" data-id="' + keysArr[i] + '""></i></td>';
        htmlToAppendToArray += '</tr>';


        newDivHTMLWithAllElements += '<td>' + originalArray[i].vendor + '</td>';
        newDivHTMLWithAllElements += '<td>' + originalArray[i].model + '</td>';
        newDivHTMLWithAllElements += '<td>' + originalArray[i].description + '</td>';
        newDivHTMLWithAllElements += '<td>' + originalArray[i].quantity + '</td>';
        newDivHTMLWithAllElements += '<td>' + originalArray[i].serialNumber + '</td>';
        newDivHTMLWithAllElements += '<td>' + originalArray[i].subCategory + '</td>';
        newDivHTMLWithAllElements += '<td>' + originalArray[i].purchaseDate + '</td>';
        newDivHTMLWithAllElements += '<td>' + originalArray[i].assignmentDate + '</td>';
        newDivHTMLWithAllElements += '<td>' + originalArray[i].EOLDate + '</td><td><i class="fa fa-trash" aria-hidden="true" style="float: right;" data-id="' + keysArr[i] + '""></i></td>';
        newDivHTMLWithAllElements += '</tr>';
       
       }
      }
      newDivHTMLWithAllElements += '</tbody></table>';
      htmlToAppendToArray += '</tbody></table>';
      console.log(htmlToAppendToArray)
      console.log(newDivHTMLWithAllElements)
      tempArray.push(htmlToAppendToArray)
      //console.log(htmlToAppendToArray)
      if (category === "Computer System" || category === "ComputerSystem") {
        category = "ComputerSystem";
        console.log(category)
      }
      if (filter) {
        replaceHTMLinDiv("#", category, htmlToAppendToArray);
      } else {
        replaceHTMLinDiv("#", category, newDivHTMLWithAllElements);
      }
      colorCells()
  }

   function createCellFromArrayInfo2(originalArray, category, callback, keysArr){
    grabAssetData();
    replaceHTMLinDiv("#", "Software", newDivHTMLWithAllElements);
    colorCells()
  }

  function colorCells(){
    $(".expiredCell").attr("style", "background-color : #F08080");
    $(".expiringCell").attr("style", "background-color : #EEE8AA");
  }

  function convertDateToJavaScriptDateFormat(originalDate){
    // var dateAsIntegerArray = originalDate.split("/");
    // var dateAsString = dateAsIntegerArray.join("");
    // return parseInt(dateAsString);
    var newDate = new Date(originalDate);
    return newDate;
  }
  
  function replaceHTMLinDiv(selector, divToReplace, newHTMLToAppendToDiv) {
    //console.log(selector + divToReplace)
    $(selector + divToReplace).html(newHTMLToAppendToDiv);
  }
var snaptempval;
var snaptempkeys;
var snaptempvalitems = [];
var temparray = [];
var snapshotvaluesarray = [];
  // Handle the user clicking the remove ad icon
  $(document).on("click", ".fa-trash", function(){
    var adToRemove = $(event.target).context.dataset.id;
    var r = confirm("You are about to delete an item!\nClick OK to continue operation or Cancel to dismiss.\n");
      if (r == true) {
          console.log(adToRemove);
          var tableToRemoveItemFrom = (this.parentNode.parentNode.getAttribute("class"));
          $("#" + adToRemove).remove();
          console.log(tableToRemoveItemFrom.split(" ")[0]);
          ref = firebase.database().ref(tableToRemoveItemFrom).child(adToRemove).once("value", function(snapshot){
            ref = firebase.database().ref("Employee").once("value", function(snapshot){
              snaptempval = Object.values(snapshot.val());
              
              snaptempkeys = Object.keys(snapshot.val())
              console.log(snaptempkeys);
              console.log(snaptempval)

            }).then(function(){
              for(var i = 0; i < snaptempkeys.length; i++){
                if (snaptempval[i].items) {
                  snaptempvalitems.push(snaptempval[i].items);
                  snapshotvaluesarray.push(snaptempval[i])
                  console.log(snaptempval[i].items[i])
                } else {
                  snaptempvalitems.push({items: false})
                }
              
              }
                // //console.log(snaptempvalitems)
                for(var j= 0; j < snaptempvalitems.length; j++){
                  temparray.push(Object.keys(snaptempvalitems[j]));
                  console.log(temparray)
                }

                 for (var k = 0; k < temparray.length; k++){
                    for (var l = 0; l < temparray[k].length; l++) {
                      if (adToRemove === temparray[k][l]){
                       console.log("found it")
                       console.log(snapshotvaluesarray[k].name)
                       console.log(tableToRemoveItemFrom.split(" ")[0])
                       ref = firebase.database().ref(tableToRemoveItemFrom.split(" ")[0]).child(adToRemove).remove();  
                       console.log(temparray[k]);
                       
                       removeItems("Employee", snaptempkeys[k], adToRemove);
                      }
                    }
                  }
               //console.log(snaptempval[i].items)
              //}
            })
          });

          // You will have to go to the employee whose name is the same as the currently pressed item - find their key and then execute
          // 
          return false;
      } else {
        return false;
      }
      var indexToRemove = this.id;
  });

  async function removeItems(table, key, child){
    console.log(table, key, child)
    await wait(100);
    ref = firebase.database().ref(table).child(key).child("items").child(child).remove();  
  }

    // Handle the user clicking a cell. When clicked, we want to route to a new page that will allow the user to modify the data in the cell

    // Route to new page while sending the id 
  $(document).on("click", "tr", function(){
    var cellId = ($(this).parent().context.id);
    // Grabs the div's classes and parses the values to get the category name from it
    var category = ($(this).attr('class').split(" ")[0])
    window.location.href = "/edit_item?id=" + cellId + "&category=" + category;
  });

  $(document).on('click', "#filterButton", function(){
    if ($("#filterCheckbox").is(":checked")) {
      grabAssetData(false);
      createCellFromArrayInfo2();
    } else {
      grabAssetData(true);
    }
    // Call the function with a parameter that sets the filtering to false
  });

    // This is the function that will inform the user of a successful logout
    async function flashLogoutText(timeout){
      await wait(500);
      $(".navbar").append("<div style=\"background-color: blue; margin-top: -5px;\"><h4 style=\"float: right; margin: 0px 25px 10px 0px; color: #337ab7;\">Item Successfully Modified</h4></div>");
        window.setTimeout(removeLogoutText, timeout);
    }

    function removeLogoutText() {
      $(".navbar").children().last().remove();
    }

    function wait(ms) {
      return new Promise(r => setTimeout(r, ms));
    }

  $( document ).ready(function() {
    if (window.location.hash === '#itemAdded') {
      flashLogoutText(5000);
    }

  });

</script>
</html>